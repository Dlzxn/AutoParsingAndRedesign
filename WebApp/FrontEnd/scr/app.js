const API_ENDPOINT = '/search'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const searchInput = document.getElementById('searchInput');
const resultsContainer = document.getElementById('results');
const loadingContainer = document.getElementById('loading');
const searchButton = document.getElementById('searchButton');

// –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const floatingShapes = document.createElement('div');
floatingShapes.className = 'floating-shapes';
document.body.appendChild(floatingShapes);

// –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
const toggleLoading = (show) => {
    loadingContainer.style.display = show ? 'block' : 'none';
    searchInput.disabled = show;
    document.body.style.cursor = show ? 'progress' : 'default'; // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
};


// –î–µ–±–∞—É–Ω—Å –∑–∞–ø—Ä–æ—Å–æ–≤ (500ms)
const debounce = (func, delay = 5000) => {
    let timeoutId;
    return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const createResultItem = ({ title, url, id }) => {
    const item = document.createElement('div');
    item.className = 'result-item';

    item.innerHTML = `
        <div class="link-container" style="background-color: #f0f0f0; padding: 15px; border-radius: 8px; margin-bottom: 15px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);">
    <a href="${url}" target="_blank" class="link-title" style="color: #0073e6; font-size: 16px; text-decoration: none; font-weight: bold; transition: color 0.3s ease;" onmouseover="this.style.color='#005bb5'" onmouseout="this.style.color='#0073e6'">
        ${title || (url.length > 35 ? url.substring(0, 35) + '...' : url)}
    </a>
    <div class="link-actions" style="margin-top: 10px;">
        <button class="copy-btn" data-url="${url}" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" style="background-color: #4CAF50; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; font-size: 14px; margin-right: 10px;" onmouseover="this.style.backgroundColor='#45a049'" onmouseout="this.style.backgroundColor='#4CAF50'">
            <span class="material-icons" style="font-size: 20px;">content_copy</span>
        </button>
        <button class="download-btn" data-url="${url}" title="–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ" style="background-color: #ff5722; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; font-size: 14px;" onmouseover="this.style.backgroundColor='#e64a19'" onmouseout="this.style.backgroundColor='#ff5722'">
            <span class="material-icons" style="font-size: 20px;">download</span>
        </button>
    </div>
</div>

    `;

    const copyButton = item.querySelector('.copy-btn');
    copyButton.addEventListener('click', () => {
        const videoUrl = copyButton.getAttribute('data-url');
        navigator.clipboard.writeText(videoUrl)
            .then(() => showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! ‚úÖ', 'success'))
            .catch(() => showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è üòû', 'error'));
    });

    const downloadButton = item.querySelector('.download-btn');
    downloadButton.addEventListener('click', () => {
        // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-url –∫–Ω–æ–ø–∫–∏
        const videoUrl = downloadButton.getAttribute('data-url');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch('/api/download', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'x-video-url': videoUrl  // –ü–µ—Ä–µ–¥–∞–µ–º URL –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
            const contentDisposition = response.headers.get('Content-Disposition');
            const fileName = contentDisposition ? contentDisposition.split('filename=')[1] : 'video.mp4';

            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            return response.blob().then(blob => {
                const downloadLink = document.createElement('a');
                downloadLink.href = URL.createObjectURL(blob);
                downloadLink.download = fileName;  // –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                downloadLink.click();
            });
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ');
        });
    });

    return item;
};



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
const downloadVideo = (videoUrl) => {
    fetch('/api/download', {
        method: 'GET',
        headers: {
            'x-video-url': videoUrl,  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        const contentDisposition = response.headers.get('Content-Disposition');
        let filename = 'video.mp4'; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

        if (contentDisposition) {
            const filenameMatch = contentDisposition.match(/filename\*?=["']?(?:UTF-\d['"]*)?([^;"']*)["']?/i);
            if (filenameMatch && filenameMatch[1]) {
                filename = filenameMatch[1];
            }
        }

        return Promise.all([response.blob(), filename]);
    })
    .then(([blob, filename]) => {
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        link.style.display = 'none';

        document.body.appendChild(link);
        link.click();

        window.URL.revokeObjectURL(url);
        document.body.removeChild(link);
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    });
};

// –í–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
const showNotification = (message, type = 'info') => {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
};

const performSearch = async (query) => {
    try {
        toggleLoading(true);

        // –£–±–µ–¥–∏—Å—å, —á—Ç–æ fetch –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
        const response = await fetch(`${API_ENDPOINT}?tag=${encodeURIComponent(query)}`, {
            // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏–ª–∏ –æ—Ç–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ AbortController)
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ API');

        const data = await response.json();
        resultsContainer.innerHTML = '';
        data.forEach(item => {
            resultsContainer.appendChild(createResultItem(item));
        });

    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
        resultsContainer.innerHTML = `<div class="error-message">üòû –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</div>`;
    } finally {
        toggleLoading(false);
    }
};


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
searchInput.addEventListener('input', debounce(e => {
    const query = e.target.value.trim();
    if (query.length > 2) performSearch(query);
}));

// –°—Ç–∏–ª—å –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
const styleLoader = `
    .loading-container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: none;
    }

    .floating-shapes {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
    }
`;

const styleElement = document.createElement('style');
styleElement.innerHTML = styleLoader;
document.head.appendChild(styleElement);
