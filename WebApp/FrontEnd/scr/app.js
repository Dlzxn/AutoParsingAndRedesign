const API_ENDPOINT = '/search'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const searchInput = document.getElementById('searchInput');
const resultsContainer = document.getElementById('results');
const loadingContainer = document.getElementById('loading');

// –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const floatingShapes = document.createElement('div');
floatingShapes.className = 'floating-shapes';
document.body.appendChild(floatingShapes);

// –î–µ–±–∞—É–Ω—Å –∑–∞–ø—Ä–æ—Å–æ–≤ (500ms)
const debounce = (func, delay = 500) => {
    let timeoutId;
    return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
};

// –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
const toggleLoading = (show) => {
    loadingContainer.style.display = show ? 'block' : 'none';
    searchInput.disabled = show;
};


// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const createResultItem = ({ title, url, id }) => {
    const item = document.createElement('div');
    item.className = 'result-item';

    item.innerHTML = `
        <div class="link-container" style="background-color: #f0f0f0; padding: 15px; border-radius: 8px; margin-bottom: 15px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);">
            <a href="${url}" target="_blank" class="link-title" style="color: #0073e6; font-size: 16px; text-decoration: none; font-weight: bold; transition: color 0.3s ease;" onmouseover="this.style.color='#005bb5'" onmouseout="this.style.color='#0073e6'">${title || url}</a>
            <div class="link-actions" style="margin-top: 10px;">
                <button class="copy-btn" data-url="${url}" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" style="background-color: #4CAF50; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; font-size: 14px; margin-right: 10px;" onmouseover="this.style.backgroundColor='#45a049'" onmouseout="this.style.backgroundColor='#4CAF50'">
                    <span class="material-icons" style="font-size: 20px;">content_copy</span>
                </button>
                <button class="download-btn" data-id="${id}" title="–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ" style="background-color: #ff5722; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; font-size: 14px;" onmouseover="this.style.backgroundColor='#e64a19'" onmouseout="this.style.backgroundColor='#ff5722'">
                    <span class="material-icons" style="font-size: 20px;">download</span>
                </button>
            </div>
        </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å"
    const downloadButton = item.querySelector('.download-btn');
    downloadButton.addEventListener('click', () => {
        const videoId = downloadButton.getAttribute('data-id');

        // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        fetch(`/api/${videoId}`)
            .then(response => response.blob()) // –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Blob
            .then(blob => {
                // –ó–¥–µ—Å—å –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Electron)
                const fileURL = window.URL.createObjectURL(blob);
                const newWindow = window.open(fileURL, '_blank'); // –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ

                // –ó–∞–∫—Ä—ã—Ç–∏–µ URL –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                newWindow.onload = () => {
                    window.URL.revokeObjectURL(fileURL); // –æ—á–∏—â–∞–µ–º URL –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –≤ –æ–∫–Ω–æ
                };
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ:', error);
            });
    });

    return item;
};



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const handleCopy = async (url) => {
    try {
        await navigator.clipboard.writeText(url);
        showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    } catch (err) {
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    }
};

// –í–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
const showNotification = (message, type = 'info') => {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
const performSearch = async (query) => {
    try {
        toggleLoading(true);

        const response = await fetch(`${API_ENDPOINT}?tag=${encodeURIComponent(query)}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ API');

        const data = await response.json();

        resultsContainer.innerHTML = '';
        data.forEach(item => {
            resultsContainer.appendChild(createResultItem(item));
        });

    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
        resultsContainer.innerHTML = `<div class="error-message">üòû –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</div>`;
    } finally {
        toggleLoading(false);
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('click', async (e) => {
    if (e.target.closest('.copy-btn')) {
        const url = e.target.closest('.copy-btn').dataset.url;
        handleCopy(url);
    }

    if (e.target.closest('.download-btn')) {
        const url = e.target.closest('.download-btn').dataset.url;
        window.open(`${url}?download=true`, '_blank');
    }
});

searchInput.addEventListener('input', debounce(e => {
    const query = e.target.value.trim();
    if (query.length > 2) performSearch(query);
}));

// –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = 1;
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, { threshold: 0.1 });

document.querySelectorAll('.result-item').forEach(item => observer.observe(item));


// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settingsBtn.addEventListener('click', () => {
    settingsDropdown.classList.toggle('active');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
document.addEventListener('click', (e) => {
    if (!settingsBtn.contains(e.target) && !settingsDropdown.contains(e.target)) {
        settingsDropdown.classList.remove('active');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
deleteDataBtn.addEventListener('click', () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?')) {
        localStorage.clear();
        resultsContainer.innerHTML = '';
        searchInput.value = '';
        alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    }
});
settingsBtn.addEventListener('click', () => {
    settingsDropdown.classList.toggle('active');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
document.addEventListener('click', (e) => {
    if (!settingsBtn.contains(e.target) && !settingsDropdown.contains(e.target)) {
        settingsDropdown.classList.remove('active');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
deleteDataBtn.addEventListener('click', () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?')) {
        localStorage.clear();
        resultsContainer.innerHTML = '';
        searchInput.value = '';
        alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    }
});