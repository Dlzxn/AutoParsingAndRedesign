const searchInput = document.getElementById('searchInput');
const searchButton = document.getElementById('searchButton');
const resultsContainer = document.getElementById('results');
const loadingOverlay = document.getElementById('loadingOverlay');

const toggleLoading = (show) => {
    loadingOverlay.style.display = show ? 'flex' : 'none';
    searchInput.disabled = show;
    searchButton.disabled = show;
};

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
const showError = (message) => {
    resultsContainer.innerHTML = `<div class="error-message">‚ùå ${message}</div>`;
};

const createResultItem = (url) => {
    if (!url || typeof url !== 'string') {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL:', url);
        return document.createElement('div'); // –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
    }

    const item = document.createElement('div');
    item.className = 'result-item';

    item.innerHTML = `
    <div class="video-box">
        <h3>
            <span class="video-title" title="${url}">
                ${url.slice(0, 25)}${url.length > 22 ? '...' : ''}
            </span>
        </h3>

        <video width="100%" height="auto" controls preload="none" style="max-width: 560px; border-radius: 10px;">
            <source src="${url}" type="video/mp4">
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ.
        </video>

        <div class="button-group" style="margin-top: 10px;">
            <a href="${url}" target="_blank">
                <button class="download-button">–°–∫–∞—á–∞—Ç—å</button>
            </a>
            <button class="edit-button" data-url="${url}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        </div>
    </div>
`;
    item.addEventListener('click', (event) => {
    const videoUrl = url; // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –ª—é–±–æ–º –∫–ª–∏–∫–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    fetch(`/view?url=${encodeURIComponent(videoUrl)}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
    })
    .then(response => response.json())
    .then(data => {
        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    });
});



    const editButton = item.querySelector('.edit-button');
    editButton.addEventListener('click', () => {
        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ:', url);
    });

    return item;
};




// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
const performSearch = async (query) => {
    toggleLoading(true);
    resultsContainer.innerHTML = '';

    try {
        const response = await fetch(`/search/Coub?tag=${encodeURIComponent(query)}`);

        const data = await response.json();

        if (!response.ok) {
            showError(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞');
            return;
        }

        if (!data.length) {
            resultsContainer.innerHTML = `<div class="no-results">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï</div>`;
            return;
        }

        // –¢–µ–ø–µ—Ä—å data - —ç—Ç–æ –º–∞—Å—Å–∏–≤, –∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .forEach –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        data.forEach(url => {
    resultsContainer.appendChild(createResultItem(url));
});


    } catch (err) {
        console.error(err);
        showError('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
        toggleLoading(false);
    }
};


// –°–ª—É—à–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫–∏
searchButton.addEventListener('click', () => {
    const query = searchInput.value.trim();
    if (query.length > 2) {
        performSearch(query);
    } else {
        showError('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
    }
});
