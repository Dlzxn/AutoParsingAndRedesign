const searchInput = document.getElementById('searchInput');
const searchButton = document.getElementById('searchButton');
const resultsContainer = document.getElementById('results');
const loadingOverlay = document.getElementById('loadingOverlay');
const errorTemplate = document.getElementById('errorTemplate');

const toggleLoading = (show) => {
    if (show) {
        loadingOverlay.style.display = 'flex';
        searchButton.querySelector('.button-text').style.opacity = '0';
        searchButton.querySelector('.button-loader').style.display = 'block';
    } else {
        loadingOverlay.style.display = 'none';
        searchButton.querySelector('.button-text').style.opacity = '1';
        searchButton.querySelector('.button-loader').style.display = 'none';
    }
    searchInput.disabled = show;
    searchButton.disabled = show;
};

const showError = (message) => {
    const errorClone = errorTemplate.content.cloneNode(true);
    const errorMessage = errorClone.querySelector('.error-message');
    const retryButton = errorClone.querySelector('.retry-button');

    errorMessage.textContent = message;

    retryButton.addEventListener('click', () => {
        document.querySelector('.error-notification')?.remove();
    });

    document.body.appendChild(errorClone);

    setTimeout(() => {
        document.querySelector('.error-notification')?.remove();
    }, 5000);
};

const createResultItem = (postData) => {
    const { type, summary, post_url, blog_name, timestamp, tags, id} = postData;
    const item = document.createElement('div');
    item.className = 'result-item';

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    const postDate = new Date(timestamp * 1000).toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });

    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å –ø–æ—Å—Ç–æ–º
    const embedUrl = `https://embed.tumblr.com/embed/post/${blog_name}/${id}`;
    console.log(embedUrl)

item.innerHTML = `
    <div class="tumblr-post-container">
        <iframe src="${embedUrl}" 
                class="tumblr-iframe" 
                frameborder="0" 
                allowfullscreen
                scrolling="no"
                width="100%"
                height="500">
        </iframe>
        
        <div class="post-controls">
            <button class="copy-button" data-summary="${encodeURIComponent(summary)}">
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
            </button>
            <button class="edit-button" data-summary="${encodeURIComponent(summary)}">
                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
        </div>
    </div>
`;


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const copyButton = item.querySelector('.copy-button');
    const editButton = item.querySelector('.edit-button');

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    copyButton.addEventListener('click', () => {
        navigator.clipboard.writeText(summary)
            .then(() => {
                const originalText = copyButton.textContent;
                copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    copyButton.textContent = originalText;
                }, 2000);
            })
            .catch(err => console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err));
    });

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    editButton.addEventListener('click', () => {
        window.location.href = `/editor?text=${encodeURIComponent(summary)}`;
    });

    return item;
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
const performSearch = async (query) => {
    toggleLoading(true);
    resultsContainer.innerHTML = '';

    try {
        const response = await fetch(`/search/tumblr?tag=${encodeURIComponent(query)}`);

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        }

        const posts = await response.json();

        if (!posts.length) {
            resultsContainer.innerHTML = `<div class="no-results">–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòï</div>`;
            return;
        }

        posts.forEach(post => {
            resultsContainer.appendChild(createResultItem(post));
        });

    } catch (err) {
        console.error('Error:', err);
        showError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
        toggleLoading(false);
    }
};

// –°–ª—É—à–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫–∏
searchButton.addEventListener('click', () => {
    const query = searchInput.value.trim();
    if (query.length > 2) {
        performSearch(query);
    } else {
        showError('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
    }
});